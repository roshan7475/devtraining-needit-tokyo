<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_needit</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>dateAndTime</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	
	// Instantiate the NeedItUtils class.  Call the isDatePast method and pass 
  // the u_when_needed value.
/*  var niutils = new NeedItUtils();
  var isPast = niutils.isDatePast(current.u_when_needed);
  
  // If the isDatePast method returns true, the date is in the past.
  if(isPast == true){
    gs.addErrorMessage("When needed date cannot be in the past.  Your request has not been saved to the database.");
    current.setAbortAction(true);
  }
	*/
	// pass the When needed field value to the isDateToday method in NeedItUtils
  var isToday = niutils.isDateToday(current.u_when_needed);
  
  // if the isDateToday method returns true the When needed date is today 
  if(isToday == true){
    gs.addErrorMessage("You cannot submit NeedIt requests for today.");
    current.setAbortAction(true);
  }
	
/*  // rightnow stores the current time
  var rightnow = new GlideDateTime();
	
  // Create a GlideDateTime object for the When needed date
  var whenNeeded = new GlideDateTime(current.u_when_needed);
  
  // If the When needed date is before rightnow, do not write the record to the database
  // Output an error message to the screen
	//logic for we do not fill the details with past date and time 
	// we just fill details for todays time
	
    if(whenNeeded.before(rightnow)){
    gs.addErrorMessage("When needed date cannot be in the past.  Your request has not been saved to the database.");
    current.setAbortAction(true);
 }
	
	
 //logic for same day is not allowed to fill request.
	
	var todayDate=rightnow.getLocalDate();
	var todayWhenNeededDate=whenNeeded.getLocalDate();
	 if(todayDate.compareTo(todayWhenNeededDate)==0)
		 {
			 gs.addErrorMessage("You cannot add NeedIt request for today");
			 current.setAbortAction(true);
		 }
		 */
	//var num1=10;
	//var num2=20;
	//test(num1,num2);
	
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-06 10:43:38</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>68e595dac39af110c00c753ce00131fc</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>dateAndTime</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_68e595dac39af110c00c753ce00131fc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-09 07:45:55</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=68e595dac39af110c00c753ce00131fc"/>
</record_update>
